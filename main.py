# dashboard_online_retail.py
import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
# ------------------------
# Fun√ß√µes auxiliares
# ------------------------
@st.cache_data
def carregar_dados():
    df = pd.read_excel("Online Retail.xlsx")
    df = df.dropna(subset=["CustomerID"])
    df["Pre√ßoTotal"] = df["Quantity"] * df["UnitPrice"]
    df["DataNota"] = pd.to_datetime(df["InvoiceDate"])
    df["M√™s"] = df["DataNota"].dt.to_period("M").dt.to_timestamp()
    df["Hora"] = df["DataNota"].dt.hour
    df["DiaSemana"] = df["DataNota"].dt.day_name()

    df = df.rename(columns={
        "InvoiceNo": "NotaFiscal",
        "StockCode": "C√≥digoProduto",
        "Description": "Descri√ß√£o",
        "Quantity": "Quantidade",
        "UnitPrice": "Pre√ßoUnit√°rio",
        "CustomerID": "ClienteID",
        "Country": "Pa√≠s"
    })
    return df

# ------------------------
# Carregamento dos dados
# ------------------------
df = carregar_dados()

# ------------------------
# Sidebar - Filtros globais
# ------------------------
st.sidebar.title("Dashboard - Online Retail")

st.sidebar.markdown("""
#### ‚ÑπÔ∏è Sobre o Dashboard
Este painel interativo tem como objetivo analisar os dados de vendas do dataset Online Retail.

""")

# Filtro por data
data_min = df["DataNota"].min()
data_max = df["DataNota"].max()
periodo = st.sidebar.date_input("üóìÔ∏è Per√≠odo:", (data_min, data_max), format="DD/MM/YYYY")
if len(periodo) == 2:
    df = df[(df["DataNota"] >= pd.to_datetime(periodo[0])) & (df["DataNota"] <= pd.to_datetime(periodo[1]))]

# Bot√£o para download dos dados filtrados
csv = df.to_csv(index=False).encode('utf-8')
st.sidebar.download_button(
    label="‚¨áÔ∏è Baixar dados filtrados",
    data=csv,
    file_name='dados_filtrados.csv',
    mime='text/csv'
)

# ------------------------
# Navega√ß√£o entre p√°ginas
# ------------------------
pagina = st.sidebar.radio("Ir para:", [
    "Vis√£o Geral",
    "Produtos",
    "Clientes e Pa√≠ses",
    "An√°lises Temporais"
])

st.sidebar.markdown("""
#### ‚ÑπÔ∏è Navega√ß√£o
Voc√™ pode navegar entre as p√°ginas usando o menu lateral. Cada se√ß√£o apresenta diferentes perspectivas dos dados:
- **Vis√£o Geral:** indicadores e receita mensal.
- **Produtos:** an√°lise de produtos mais vendidos e pre√ßos.
- **Clientes e Pa√≠ses:** principais clientes e pa√≠ses com maior receita.
- **An√°lises Temporais:** comportamento por hora e dia da semana.

**Filtros de per√≠odo** dispon√≠veis no topo da barra lateral afetam todos os dados exibidos nas p√°ginas.
""")
# ------------------------
# P√°gina 1 - Vis√£o Geral
# ------------------------
if pagina == "Vis√£o Geral":
    st.title("üìà Vis√£o Geral das Vendas")
    st.markdown("Resumo geral de indicadores e tend√™ncias mensais.")

    col1, col2, col3 = st.columns(3)
    col1.metric("üí∞ Receita Total", f"¬£{df['Pre√ßoTotal'].sum():,.2f}")
    col2.metric("üì¶ Pedidos", df["NotaFiscal"].nunique())
    col3.metric("üßë‚Äçüíº Clientes", df["ClienteID"].nunique())

    # Indicadores extras
    pedido_medio = df["Pre√ßoTotal"].sum() / df["NotaFiscal"].nunique()
    produto_top = df.groupby("Descri√ß√£o")["Quantidade"].sum().idxmax()
    cliente_top = df.groupby("ClienteID")["Pre√ßoTotal"].sum().idxmax()

    st.info(f"üìå Pedido m√©dio: ¬£{pedido_medio:,.2f}\n\nüîù Produto mais vendido: {produto_top}\n\nüèÜ Melhor Cliente: {cliente_top}")

    # Receita mensal
    receita_mensal = df.groupby("M√™s")["Pre√ßoTotal"].sum().reset_index()
    fig = px.line(receita_mensal, x="M√™s", y="Pre√ßoTotal", markers=True, title="Receita Mensal")
    st.plotly_chart(fig, use_container_width=True)

# ------------------------
# P√°gina 2 - Produtos
# ------------------------
elif pagina == "Produtos":
    st.title("üì¶ Produtos Vendidos")
    st.markdown("Analise os produtos mais populares e a distribui√ß√£o dos pre√ßos unit√°rios.")

    paises = sorted(df['Pa√≠s'].unique())
    pais_selecionado = st.selectbox("üåç Selecione o pa√≠s:", options=paises, index=paises.index("United Kingdom"))
    df_filtrado = df[df['Pa√≠s'] == pais_selecionado]

    tab1, tab2 = st.tabs(["üîù Top Produtos", "üí≤ Pre√ßos por Unidade"])

    with tab1:
        top_produtos = df_filtrado.groupby("Descri√ß√£o")["Quantidade"].sum().sort_values(ascending=False).head(10)
        fig_bar = px.bar(top_produtos, x=top_produtos.values, y=top_produtos.index,
                         orientation='h', title=f"Top 10 Produtos - {pais_selecionado}")
        st.plotly_chart(fig_bar, use_container_width=True)

    with tab2:
        max_preco = int(df["Pre√ßoUnit√°rio"].quantile(0.99))
        faixa_preco = st.slider("Faixa de pre√ßo:", 0, max_preco, (0, max_preco))
        df_preco = df_filtrado[(df_filtrado["Pre√ßoUnit√°rio"] >= faixa_preco[0]) & (df_filtrado["Pre√ßoUnit√°rio"] <= faixa_preco[1])]
        fig_hist = px.histogram(df_preco, x="Pre√ßoUnit√°rio", nbins=50, title="Distribui√ß√£o dos Pre√ßos")
        st.plotly_chart(fig_hist, use_container_width=True)

# ------------------------
# P√°gina 3 - Clientes e Pa√≠ses
# ------------------------
elif pagina == "Clientes e Pa√≠ses":
    st.title("üåç Clientes e Pa√≠ses")

    tab1, tab2 = st.tabs(["üåê Receita por Pa√≠s", "üë§ Receita por Cliente"])

    with tab1:
        receita_paises = df.groupby("Pa√≠s")["Pre√ßoTotal"].sum().sort_values(ascending=False).head(10)
        fig_paises = px.bar(receita_paises, x=receita_paises.index, y=receita_paises.values,
                            labels={"x": "Pa√≠s", "y": "Receita"}, title="Top 10 Pa√≠ses por Receita")
        st.plotly_chart(fig_paises, use_container_width=True)

    with tab2:
        min_receita = int(df["Pre√ßoTotal"].sum() * 0.001)
        receita_min = st.slider("Receita m√≠nima:", min_receita, 10000, min_receita)
        receita_clientes = df.groupby("ClienteID")["Pre√ßoTotal"].sum().reset_index()
        receita_clientes = receita_clientes[receita_clientes["Pre√ßoTotal"] >= receita_min].sort_values("Pre√ßoTotal", ascending=False).head(10)
        fig_clientes = px.bar(receita_clientes, x="ClienteID", y="Pre√ßoTotal",
                              labels={"ClienteID": "Cliente", "Pre√ßoTotal": "Receita"},
                              title="Top 10 Clientes por Receita")
        st.plotly_chart(fig_clientes, use_container_width=True)
        st.dataframe(receita_clientes, use_container_width=True)

# ------------------------
# P√°gina 4 - An√°lises Temporais
# ------------------------
elif pagina == "An√°lises Temporais":
    st.title("‚è±Ô∏è An√°lises Temporais")

    tab1, tab2 = st.tabs(["üïò Pedidos por Hora", "üìÖ Pedidos por Dia da Semana"])

    with tab1:
        pedidos_hora = df.groupby("Hora")["NotaFiscal"].nunique().reset_index(name="Pedidos")
        fig_hora = px.bar(pedidos_hora, x="Hora", y="Pedidos",
                          title="Pedidos por Hora do Dia",
                          labels={"Hora": "Hora", "Pedidos": "Pedidos"})
        st.plotly_chart(fig_hora, use_container_width=True)

    with tab2:
        pedidos_dia = df.groupby("DiaSemana")["NotaFiscal"].nunique().reset_index(name="Pedidos")
        ordem_dias = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
        pedidos_dia["DiaSemana"] = pd.Categorical(pedidos_dia["DiaSemana"], categories=ordem_dias, ordered=True)
        pedidos_dia = pedidos_dia.sort_values("DiaSemana")
        fig_semana = px.bar(pedidos_dia, x="DiaSemana", y="Pedidos",
                            title="Pedidos por Dia da Semana",
                            labels={"DiaSemana": "Dia", "Pedidos": "Pedidos"})
        st.plotly_chart(fig_semana, use_container_width=True)

# ------------------------
# Rodap√©
# ------------------------
st.sidebar.markdown("---")
st.sidebar.caption("Desenvolvido por Jonathan | Dataset: UCI Online Retail")
